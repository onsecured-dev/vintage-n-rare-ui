generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model acousticguitar {
  updatedAt                 DateTime @updatedAt
  NFTCID                    String
  NFTId                     Int      @id
  fullName                  String
  active                    Boolean  @default(true)
  backAndSides              String
  bodyMaterial              String
  bracePattern              String
  brand                     String
  bridge                    String
  case                      String
  containsBrazilianRosewood Boolean
  electronics               String
  fingerboardRadius         String
  finish                    String
  finishMaterial            String
  handedness                String
  year                      Int
  model                     String
  modificationsRepairs      String
  neckDepth                 String
  neckFingerboard           String
  neckProfile               String
  nutWidth                  String
  scaleLength               String
  serialNumber              String
  stringSpacingAtSaddle     String
  top                       String
  tuners                    String
}

model ampfx {
  NFTCID               String
  NFTId                Int      @id
  fullName             String
  active               Boolean  @default(true)
  year                 Int
  brand                String
  model                String
  serialNumber         String
  modificationsRepairs String
  choke                String
  circuit              String
  finish               String
  instrument           String
  power                String
  preamp               String
  rectifier            String
  reverbOther          String
  speaker              String
  speakerCodes         String
  transformer          String
  transformersOT       String
  transformersPT       String
  wattage              String
  updatedAt            DateTime @updatedAt
}

model bass {
  NFTCID               String
  NFTId                Int      @id
  fullName             String
  active               Boolean  @default(true)
  bodyMaterial         String
  brand                String
  case                 String
  electronics          String
  fingerboardRadius    String
  finish               String
  finishMaterial       String
  handedness           String
  model                String
  modificationsRepairs String
  neckFingerboard      String
  neckProfile          String
  neckThickness        String
  nutWidth             String
  potCodes             String
  pickupImpedance      String
  scaleLength          String
  serialNumber         String
  tuners               String
  weight               String
  year                 Int
  updatedAt            DateTime @updatedAt
}

model electricguitar {
  NFTCID                    String
  NFTId                     Int      @id
  fullName                  String
  // instrument
  active                    Boolean  @default(true)
  bodyMaterial              String
  brand                     String
  case                      String
  containsBrazilianRosewood Boolean
  electronics               String
  finish                    String
  finishMaterial            String
  handedness                String
  year                      Int
  serialNumber              String
  model                     String
  modificationsRepairs      String
  neckFingerboard           String
  neckProfile               String
  neckThickness             String
  nutWidth                  String
  pickupImpedance           String
  potCodes                  String
  radius                    String
  scaleLength               String
  tuners                    String
  weight                    String
  updatedAt                 DateTime @updatedAt
}

model pending {
  cid  String @id
  data Json
}

model brands {
  id          Int           @id @default(autoincrement())
  brand       String        @unique(map: "Brands_brand_key")
  // updatedAt   DateTime      @db.DateTime()
  searchtable searchtable[]
  wordbank    wordbank[]
}

model instrumenttype {
  id          Int           @id @default(autoincrement())
  name        String        @unique(map: "InstrumentType_name_key")
  // updatedAt   DateTime      @db.DateTime()
  searchtable searchtable[]
  wordbank    wordbank[]
}

model searchtable {
  id        Int            @id @default(autoincrement())
  name      String
  // instrument
  // 2004 fendre bass p
  // 
  updatedAt DateTime       @updatedAt
  yearsYear Int
  brandsId  Int
  typeId    Int
  nftid     Int
  brands    brands         @relation(fields: [brandsId], references: [id], map: "SearchTable_brandsId_fkey")
  years     years          @relation(fields: [yearsYear], references: [year], map: "SearchTable_yearsYear_fkey")
  type      instrumenttype @relation(fields: [typeId], references: [id])

  @@index([brandsId], map: "SearchTable_brandsId_fkey")
  @@index([yearsYear], map: "SearchTable_yearsYear_fkey")
  @@index([typeId], map: "searchtable_typeId_fkey")
}

model wordbank {
  id       Int            @id @default(autoincrement())
  word     String
  alias    String?
  brandsId Int
  typeId   Int
  brands   brands         @relation(fields: [brandsId], references: [id], map: "Wordbank_brandsId_fkey")
  type     instrumenttype @relation(fields: [typeId], references: [id])

  @@index([brandsId], map: "Wordbank_brandsId_fkey")
  @@index([typeId], map: "wordbank_typeId_fkey")
}

model years {
  year        Int           @id @default(autoincrement())
  // updatedAt   DateTime
  searchtable searchtable[]
}
